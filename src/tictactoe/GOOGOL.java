/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;


/**
 *
 * @author fahad
 */
public class GOOGOL extends javax.swing.JFrame {

    /**
     * Creates new form GOOGOL
     */
    public GOOGOL() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        t1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta1 = new javax.swing.JTextArea();
        b1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Googol\n");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        t1.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });
        t1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t1KeyTyped(evt);
            }
        });
        getContentPane().add(t1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 400, -1));

        ta1.setEditable(false);
        ta1.setColumns(20);
        ta1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ta1.setLineWrap(true);
        ta1.setRows(5);
        jScrollPane1.setViewportView(ta1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 600, 250));

        b1.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        b1.setText("Search");
        b1.setMaximumSize(new java.awt.Dimension(710, 500));
        b1.setMinimumSize(new java.awt.Dimension(710, 500));
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });
        getContentPane().add(b1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/desktop-background.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-110, 0, -1, -1));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Clear All");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void search(){
        String s = t1.getText();
        ta1.setText("");
        if(s.charAt(0)=='s'){
            try {
                Scanner b = new Scanner(new FileInputStream(substringChecker(s)));
                ta1.append("Your search " + s + " produced the following hits\n");
                while (b.hasNextLine()) {
                    String a=b.nextLine();
                    ta1.append(a+"\n");
                }
                b.close();
            } catch (IOException e) {
                ta1.append("Your search did not yield any results");
            }
        }
        else if(s.charAt(0)=='c' && s.charAt(1)==' '){
            try{
            if(simpleOperation(s.substring(2))[0] == Double.POSITIVE_INFINITY || simpleOperation(s.substring(2))[0] == Double.NEGATIVE_INFINITY)
                throw new ArithmeticException();
            
            ta1.setText(simpleOperation(s.substring(2))[0]+"");
            }catch(ArithmeticException e){
                ta1.setText("Error");
            }
            catch(IndexOutOfBoundsException e){
                ta1.setText("Syntax Error");
            }
        }
        else if(containsIgnoreCase(s, "convert")){
            try{
            moneyConversion(s);
            }catch(NumberFormatException e){
                
            }    
        }
        else{
            checker(s);
        }
        ta1.setCaretPosition(0);
    }
    //available search terms
    public static String substringChecker(String s) {
        String query = "";
        if (containsIgnoreCase(s, "Shop","mall", "amazon")) {
            query = "Shopping.txt";
        } else if (containsIgnoreCase(s, "Art", "decor")) {
            query = "Arts.txt";
        } else if (containsIgnoreCase(s, "sport", "ball", "tennis", "badminton")) {
            query = "Sports.txt";
        } else if (containsIgnoreCase(s, "busin", "finan", "bank")) {
            query = "Business.txt";
        } else if (containsIgnoreCase(s, "tech", "compu")) {
            query = "Computers.txt";
        } else if (containsIgnoreCase(s, "game", "gaming")) {
            query = "Games.txt";
        } else if (containsIgnoreCase(s, "health", "meds", "hospit")) {
            query = "Health.txt";
        } else if (containsIgnoreCase(s, "home", "furnish", "liv")) {
            query = "Home.txt";
        } else if (containsIgnoreCase(s, "kids", "teens")) {
            query = "Kids_and_Teens.txt";
        } else if (containsIgnoreCase(s, "news", "affairs")) {
            query = "News.txt";
        } else if (containsIgnoreCase(s, "Recreat", "tour", "holid","package")) {
            query = "Recreation.txt";
        } else if (containsIgnoreCase(s, "Refer", "homewo", "assign")) {
            query = "Reference.txt";
        } else if (containsIgnoreCase(s, "regi")) {
            query = "Regional.txt";
        } else if (containsIgnoreCase(s, "scie", "experim", "expt")) {
            query = "Science.txt";
        } else if (containsIgnoreCase(s, "socie", "communi")) {
            query = "Society.txt";
        } else if (containsIgnoreCase(s, "adult", "porn")) {
            query = "Adult.txt";
        }
        return query;
    }
    
    public void checker(String s){
        if(containsIgnoreCase(s,"tic"))
            new TicTac().setVisible(true);
        else if(containsIgnoreCase(s, "calcu"))
            new Calculator().setVisible(true);
        else if(containsIgnoreCase(s, "trans"))
            new translator2().setVisible(true);
        else ta1.append("Your search did not yield any results");
    }
    
    public static boolean containsIgnoreCase(String str, String... substrings){
        for (String substringX : substrings) {
            if (str.toLowerCase().contains(substringX.toLowerCase())) {
                return true;
            }
        }
        return false;
    }
    
    public static double[] simpleOperation(String line) {
        double[] result = new double[2];
        ArrayList<Double> numbers = new ArrayList<Double>();
        ArrayList<Integer> operators = new ArrayList<Integer>();

        char c = 's';
        int i;
        for (i = 0; i < line.length(); i++) {
            c = line.charAt(i);
            if (!(Character.isDigit(c) || c == '(' || c == ')' || c == '+' || c == '-' || c == '*' || c == '/')) 
                break;
            
         
        if (c == '(') {
            double[] x = simpleOperation(line.substring(i + 1));
            double resultFromMethod = x[0];
            double numOfMovingSteps = x[1];
            numbers.add(resultFromMethod);
            i += numOfMovingSteps;

        } else if (c == ')')
            break;
        
        int num = 0;
        int temp = 0;
        if (Character.isDigit(c)) {
            num = 0;
            while (Character.isDigit(c)) {
                int digit = c - '0';
                num = num * 10 + digit;
                if (i < line.length() - 1) {
                    c = line.charAt(++i);
                } else {
                    ++i;
                    break;
                }
            }

        temp = num;
        if (c == '.') {
            c = line.charAt(++i);
            num = 0;
            while (Character.isDigit(c)) {
                int digit = c - '0';
                num = num * 10 + digit;
                if (i < line.length() - 1) 
                    c = line.charAt(++i);
                else {
                    ++i;
                    break;
                }
            }
            String finalNum = temp + "." + num;
            double temp2 = Double.parseDouble(finalNum);
            numbers.add(temp2);
        } else 
            numbers.add((double) temp);
               
    }

    int numOfPlus = 0;
    int numOfMinus = 0;
    while (c == '+' || c == '-' || c == '*' || c == '/') {
        switch (c) {
            case '+':
                if (numOfPlus == 0) {
                    operators.add(0);
                    numOfPlus++;
                }
                break;
            case '-':
                if (numOfMinus == 0) {
                    operators.add(1);
                    numOfMinus++;
                } else {
                    operators.remove(operators.size() - 1);
                    operators.add(0);
                }
                break;
            case '*':
                    operators.add(2);
                break;
            case '/':
                    operators.add(3);
                break;
        }
        c = line.charAt(++i);
    }
        i--;
}
        int lengthOfString = i;
        for (int i4 = 0; i4 < operators.size();) {
            if (operators.get(i4) == 2) {
                numbers.set(i4, numbers.get(i4) * numbers.get(i4 + 1));
                numbers.remove(i4 + 1);
                operators.remove(i4);
                i4 = 0;
            } else if (operators.get(i4) == 3) {
                numbers.set(i4, numbers.get(i4) / numbers.get(i4 + 1));
                numbers.remove(i4 + 1);
                operators.remove(i4);
                i4 = 0;
            } else {
                i4++;
            }
        }
        int i5 = 0;
        while (i5 < operators.size()) {
            if (operators.get(i5) == 0) {
                numbers.set(i5, numbers.get(i5) + numbers.get(i5 + 1));
                numbers.remove(i5 + 1);
                operators.remove(i5);
            } else if (operators.get(i5) == 1) {
                numbers.set(i5, numbers.get(i5) - numbers.get(i5 + 1));
                numbers.remove(i5 + 1);
                operators.remove(i5);
            }
        }
        result[0] = numbers.get(0);
        result[1] = lengthOfString + 2;
        return result;
    }
     
    public void moneyConversion(String s){
        String[] convertStatement = new String[5];
        convertStatement = s.split(" ");
        String type = convertStatement[2].toUpperCase();
        double amount = Double.parseDouble(convertStatement[1]);
        String output = convertStatement[4].toUpperCase();
        int BHD = 0, KHR = 0, IDR = 0, LAK = 0, MMK = 0,
            PHP = 0, SGD = 0, THB = 0, USD = 0, VND = 0, 
            ARS = 0, AUD = 0, BWP = 0, BRL = 0, 
            GBP = 0, BGN = 0, CAD = 0, CLP = 0, CNY = 0,
            COP = 0, HRK = 0, CZK = 0, DKK = 0, AER = 0,
            EUR = 0, HKD = 0, HUF = 0, INR = 0, ICS = 0, 
            JPY = 0, KZT = 0, KWD = 0, LYD = 0, MUR = 0, 
            MXN = 0, NPR = 0, NZD = 0, NOK = 0, OMR = 0, 
            PKR = 0, PLN = 0, QAR = 0, RON = 0, RUB = 0,
            SAR = 0, ZAR = 0, KRW = 0, LKR = 0, SEK = 0,
            CHF = 0, TTD = 0, TWD = 0, TRY = 0, VEB = 0, MYR= 0;
        
        switch (type) { //CHANGE TO MYR FIRST
            case "BND":
                amount = amount / 0.32;
                break;
            case "KHR":
                amount = amount / 972.97;
                break;
            case "IDR":
                amount = amount / 3378.947;
                break;
            case "LAK":
                amount = amount / 2124.06;
                break;
            case "MMK":
                amount = amount / 361.74;
                break;
            case "PHP":
                amount = amount / 12.18;
                break;
            case "SGD":
                amount = amount / 0.33;
                break;
            case "THB":
                amount = amount / 7.25;
                break;
            case "USD":
                amount = amount / 0.24;
                break;
            case "VND":
                amount = amount / 5561.59;
                break;
            case "ARS":
                amount = amount / 14.35;
                break;
            case "AUD":
                amount = amount / 0.354;
                break;
            case "BHD":
                amount = amount / 0.090;
                break;
            case "BWP":
                amount = amount / 2.61;
                break;
            case "BRL":
                amount = amount / 1.02;
                break;
            case "GBP":
                amount = amount / 0.19;
                break;
            case "BGN":
                amount = amount / 0.43;
                break;
            case "CAD":
                amount = amount / 0.32;
                break;
            case "CLP":
                amount = amount / 196.31;
                break;
            case "CNY":
                amount = amount / 1.68;
                break;
            case "COP":
                amount = amount / 840.04;
                break;
            case "HRK":
                amount = amount / 1.62;
                break;
            case "CZK":
                amount = amount / 5.56;
                break;
            case "DKK":
               amount = amount / 1.62;
               break;
            case "AER":
                amount = amount / 0.88;
                break;
            case "EUR":
                amount = amount / 0.21;
                break;
            case "HKD":
                amount = amount / 1.87;
                break;
            case "HUF":
                amount = amount / 73.18;
                break;
            case "ISK":
                amount = amount / 29.37;
                break;
            case "INR":
                amount = amount / 17.16;
                break;
            case "IRR":
                amount = amount / 10037.89;
                break;
            case "ILS":
                //4.69
                amount = amount / 0.83;
                break;
            case "JPY":
                amount = amount / 26.22;
                break;
            case "KZT":
                amount = amount / 92.62;
                break;
            case "KWD":
                amount = amount / 0.07;
                break;
            case "LYD":
                amount = amount / 0.33;
                break;
            case "MUR":
                amount = amount / 8.78;
                break;
            case "MXN":
                amount = amount / 4.69;
                break;
            case "NPR":
                amount = amount / 27.59;
                break;
            case "NZD":
                amount = amount / 0.37;
                break;
            case "NOK":
                amount = amount / 2.20;
                break;
            case "OMR":
                amount = amount / 0.09;
                break;
            case "PKR":
                amount = amount / 37.21;
                break;
            case "PLN":
                amount = amount / 0.94;
                break;
            case "QAR":
                amount = amount / 0.87;
                break;
            case "RON":
                amount = amount / 1.04;
                break;
            case "RUB":
                amount = amount / 15.36;
                break;
            case "SAR":
                amount = amount / 0.89;
                break;
            case "ZAR":
                amount = amount / 3.53;
                break;
            case "KRW":
                amount = amount / 282.56;
                break;
            case "LKR":
                amount = amount / 43.3;
                break;
            case "SEK":
                amount = amount / 2.29;
                break;
            case "CHF":
                amount = amount / 0.23;
                break;
            case "TTD":
                amount = amount / 1.61;
                break;
            case "TWD":
                amount = amount / 7.30;
                break;
            case "TRY":
                amount = amount / 1.38;
                break;
            case "VEB":
                amount = amount / 2.39;
                break;
             case "MYR":
                amount = amount;
                break;
        }
        ta1.append("The value of money in "+output+" is "+convertor(amount,output));

    }

    public static double convertor(double amount, String output) {
        switch (output) { //CHANGE TO output type
            case "BND":
                amount = amount / 3.055;
                break;
            case "KHR":
                amount = amount / 0.0010;
                break;
            case "IDR":
                amount = amount / 0.00029;
                break;
            case "LAK":
                amount = amount / 0.00047;
                break;
            case "MMK":
                amount = amount / 0.0028;
                break;
            case "PHP":
                amount = amount / 0.082;
                break;
            case "SGD":
                amount = amount / 3.05;
                break;
            case "THB":
                amount = amount / 0.13;
                break;
            case "USD":
                amount = amount / 4.17;
                break;
            case "VND":
                amount = amount / 0.00018;
                break;
            case "ARS":
                amount = amount / 0.069;
                break;
            case "AUD":
                amount = amount / 2.82;
                break;
            case "BHD":
                amount = amount / 11.09;
                break;
            case "BWP":
                amount = amount / 0.38;
                break;
            case "BRL":
                amount = amount / 0.97;
                break;
            case "GBP":
                amount = amount / 5.39;
                break;
            case "BGN":
                amount = amount / 2.34;
                break;
            case "CAD":
                amount = amount / 3.13;
                break;
            case "CLP":
                amount = amount / 0.005;
                break;
            case "CNY":
                amount = amount / 0.59;
                break;
            case "COP":
                amount = amount / 0.0011;
                break;
            case "HRK":
                amount = amount / 0.61;
                break;
            case "CZK":
                amount = amount / 0.17;
                break;
            case "DKK":
                amount = amount / 0.61;
               break;
            case "AER":
                amount = amount / 1.13;
                break;
            case "EUR":
                amount = amount / 4.59;
                break;
            case "HKD":
                amount = amount / 0.533;
                break;
            case "HUF":
                amount = amount / 0.013;
                break;
            case "ISK":
                amount = amount / 0.034;
                break;
            case "INR":
                amount = amount / 0.058;
                break;
            case "IRR":
                amount = amount / 0.0001;
                break;
            case "ILS":
                amount = amount / 1.20;
                break;
            case "JPY":
                amount = amount / 0.038;
                break;
            case "KZT":
                amount = amount / 0.010;
                break;
            case "KWD":
                amount = amount / 13.72;
                break;
            case "LYD":
                amount = amount / 2.96;
                break;
            case "MUR":
                amount = amount / 0.11;
                break;
            case "MXN":
                amount = amount / 0.21;
                break;
            case "NPR":
                amount = amount / 0.036;
                break;
            case "NZD":
                amount = amount / 2.68;
                break;
            case "NOK":
                amount = amount / 0.45;
                break;
            case "OMR":
                amount = amount / 10.85;
                break;
            case "PKR":
                amount = amount / 0.026;
                break;
            case "PLN":
                amount = amount / 1.06;
                break;
            case "QAR":
                amount = amount / 1.14;
                break;
            case "RON":
                amount = amount / 0.96;
                break;
            case "RUB":
                amount = amount / 0.065;
                break;
            case "SAR":
                amount = amount / 1.112;
                break;
            case "ZAR":
                amount = amount / 0.28;
                break;
            case "KRW":
                amount = amount / 0.0035;
                break;
            case "LKR":
                amount = amount / 0.023;
                break;
            case "SEK":
                amount = amount / 0.43;
                break;
            case "CHF":
                amount = amount / 4.17;
                break;
            case "TWD":
                amount = amount / 0.61;
                break;
            case "TTD":
                amount = amount / 0.61;
                break;
            case "TRY":
                amount = amount / 0.72;
                break;
            case "VEB":
                amount = amount / 0.417;
                break;
            case "MYR":
                amount = amount ;
                break;
        }
        return amount;
    

    }
    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_b1ActionPerformed

    private void t1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            search();
        
    }//GEN-LAST:event_t1KeyPressed

    private void t1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t1KeyTyped

    }//GEN-LAST:event_t1KeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        t1.setText("");
        ta1.setText("");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GOOGOL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GOOGOL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GOOGOL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GOOGOL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GOOGOL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField t1;
    private javax.swing.JTextArea ta1;
    // End of variables declaration//GEN-END:variables
}
